# Comprehensive CI/CD workflow for Daniel Trivia App
# This workflow installs dependencies, runs tests, builds the app, and verifies it can start successfully

name: Daniel Trivia App CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test

      - name: 🏗️ Build frontend (if build script exists)
        run: npm run build --if-present

      - name: 🔍 Lint code (if lint script exists)
        run: npm run lint --if-present

  integration-test:
    runs-on: ubuntu-latest
    needs: test-and-build

    services:
      # Mock database service for testing
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔧 Create test environment file
        run: |
          cat > .env << EOF
          DB_HOST=localhost
          DB_USER=testuser
          DB_PASSWORD=testpass
          DB_NAME=testdb
          DB_PORT=3306

          JWT_SECRET=test-jwt-secret
          SESSION_SECRET=test-session-secret

          GOOGLE_CLIENT_ID=test-google-client-id
          GOOGLE_CLIENT_SECRET=test-google-client-secret
          GOOGLE_CALLBACK_URL=http://localhost:3000/auth/google/callback

          GITHUB_CLIENT_ID=test-github-client-id
          GITHUB_CLIENT_SECRET=test-github-client-secret
          GITHUB_CALLBACK_URL=http://localhost:3000/auth/github/callback

          FRONTEND_URL=http://localhost:3001
          PORT=3000

          RAPIDAPI_KEY=test-api-key
          EOF

      - name: 🚀 Start backend server in background
        run: |
          timeout 60s node App.js &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3000/api-docs >/dev/null 2>&1; then
              echo "✅ Server is running!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 30 seconds"
              exit 1
            fi
            sleep 2
          done

      - name: 🧪 Test API endpoints
        run: |
          echo "Testing API endpoints..."

          # Test health endpoint (Swagger docs)
          echo "📋 Testing Swagger docs endpoint..."
          curl -f http://localhost:3000/api-docs || exit 1

          # Test trivia endpoint
          echo "🎯 Testing trivia endpoint..."
          curl -f "http://localhost:3000/get-trivia?amount=1&difficulty=easy" || exit 1

          # Test user endpoint (should return 401 for unauthenticated)
          echo "👤 Testing user endpoint..."
          curl -s http://localhost:3000/api/user | grep -q "Not authenticated" || exit 1

          echo "✅ All API tests passed!"

      - name: 🛑 Cleanup
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID 2>/dev/null || true
          fi

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [test-and-build, integration-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build --if-present

      - name: 📊 Generate build summary
        run: |
          echo "## 🚀 Deployment Ready!" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend server starts successfully" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API endpoints are functional" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Deploy to your EC2 instance" >> $GITHUB_STEP_SUMMARY
          echo "2. Update environment variables" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure OAuth providers" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success notification
        run: |
          echo "🎉 Daniel Trivia App is ready for deployment!"
          echo "✅ Code quality: PASSED"
          echo "✅ Tests: PASSED" 
          echo "✅ Integration: PASSED"
          echo "✅ Build: PASSED"
