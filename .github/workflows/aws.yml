# This workflow will deploy your application to an Amazon EC2 instance
# when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create GitHub Actions secrets:
#    - AWS_ACCESS_KEY_ID: Your AWS access key ID
#    - AWS_SECRET_ACCESS_KEY: Your AWS secret access key  
#    - EC2_SSH_KEY: Your EC2 instance private SSH key (the .pem file content)
#    - EC2_HOST_USER: The username for your EC2 instance (usually 'ec2-user' for Amazon Linux)
#
# 2. Ensure your EC2 instance has:
#    - Docker installed
#    - Docker Compose installed
#    - Git installed
#    - Proper security group settings (ports 3000, 5173 open as needed)
#
# 3. Make sure your EC2 instance security group allows SSH (port 22) from GitHub Actions runners
#    GitHub Actions IP ranges: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#ip-addresses

name: Deploy to Amazon EC2

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                       # set this to your preferred AWS region
  EC2_INSTANCE_ID: i-0a3eb8560120b7a17        # your EC2 instance ID
  EC2_HOST_USER: ec2-user                     # username for your EC2 instance
  APP_DIR: /home/ec2-user/Daniels-Projects/Daniel-Trivia-App  # deployment directory on EC2

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: false

    - name: Verify AWS credentials
      run: |
        echo "Testing AWS credentials..."
        aws sts get-caller-identity
        echo "AWS Region: ${{ env.AWS_REGION }}"

    - name: Get EC2 instance public IP
      id: get-ip
      run: |
        echo "Getting public IP for instance: ${{ env.EC2_INSTANCE_ID }}"
        INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        echo "EC2 Instance IP: $INSTANCE_IP"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ steps.get-ip.outputs.instance_ip }}
        username: ${{ env.EC2_HOST_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        command_timeout: 10m
        script: |
          echo "Starting deployment..."
          
          # Navigate to app directory
          cd ${{ env.APP_DIR }} || { echo "Directory not found!"; exit 1; }
          
          # Pull latest changes
          git pull origin main || { echo "Git pull failed!"; exit 1; }
          
          # Stop existing containers
          docker-compose down || echo "No containers to stop"
          
          # Remove old images to free up space
          docker image prune -f || echo "Image prune failed"
          
          # Build and start containers
          docker-compose up -d --build || { echo "Docker compose failed!"; exit 1; }
          
          # Show running containers
          docker ps
          
          echo "Deployment completed successfully!"

    - name: Verify deployment
      run: |
        echo "Application deployed to EC2 instance: ${{ env.EC2_INSTANCE_ID }}"
        echo "Instance IP: ${{ steps.get-ip.outputs.instance_ip }}"
        echo "Frontend should be available at: http://${{ steps.get-ip.outputs.instance_ip }}:5173"
        echo "Backend should be available at: http://${{ steps.get-ip.outputs.instance_ip }}:3000"
